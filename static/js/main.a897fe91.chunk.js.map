{"version":3,"sources":["components/FizzBuzz.tsx","calc/FizzBuzzCalculator.tsx","components/FizzBuzzList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FizzBuzz","props","num","Paper","Typography","variant","gutterBottom","calc","Number","FizzBuzzList","list","Array","map","_","i","value","key","String","useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","padding","width","height","App","useState","count","setCount","classes","className","TextField","id","label","type","InputLabelProps","shrink","inputProps","min","onChange","e","target","length","slice","defaultValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQASaA,EAAW,SAACC,GAAqB,IACpCC,EAAQD,EAARC,IACR,OACE,gCACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAClCJ,GAEH,gBAACE,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GCjBzB,SAACJ,GACnB,OAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,EACxB,WAGLA,EAAM,IAAM,EACP,OAELA,EAAM,IAAM,EACP,OAEH,GAAN,OAAUA,GDODK,CAAKC,OAAON,Q,QEfVO,EAAe,SAACR,GAAgB,IACnCC,EAAQD,EAARC,IAEJQ,EAAO,YAAIC,MAAMH,OAAON,KAAOU,KAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAI,KAErD,OACE,gCACGJ,EAAKE,KAAI,SAACG,GACT,OAAO,gBAAC,EAAD,CAAUC,IAAKD,EAAOb,IAAKe,OAAOF,U,gBCH3CG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACV,QAAS,CACPC,OAAQJ,EAAMK,QAAQ,GACtBC,QAASN,EAAMK,QAAQ,GACvBE,MAAOP,EAAMK,QAAQ,IACrBG,OAAQR,EAAMK,QAAQ,UAkDbI,MA7Cf,WAAgB,IAAD,EACaC,mBAAS,KADtB,mBACNC,EADM,KACCC,EADD,KAEPC,EAAUf,IAahB,OACE,yBAAKgB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CACEC,GAAG,kBACHC,MAAM,WACNC,KAAK,SACLC,gBAAiB,CACfC,QAAQ,GAEVC,WAAY,CACVC,IAAK,GAEPrC,QAAQ,WACRsC,SAzBY,SAACC,GACLpC,OAAOoC,EAAEC,OAAO9B,OAClB,IACV6B,EAAEC,OAAO9B,MAAQ,KAEf6B,EAAEC,OAAO9B,MAAM+B,OAAS,IAC1BF,EAAEC,OAAO9B,MAAQ6B,EAAEC,OAAO9B,MAAMgC,MAAM,EAAG,IAE3Cf,EAASY,EAAEC,OAAO9B,QAkBZiC,aAAcjB,IAGhB,yBAAKG,UAAWD,EAAQZ,MACtB,kBAAC,EAAD,CAAUnB,IAAK6B,KAGjB,yBAAKG,UAAWD,EAAQZ,MACtB,kBAAC,EAAD,CAAcnB,IAAK6B,QC/CTkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a897fe91.chunk.js","sourcesContent":["import * as React from 'react'\nimport { calc } from '../calc/FizzBuzzCalculator'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\n\ninterface FizzBuzz {\n  num: String\n}\n\nexport const FizzBuzz = (props: FizzBuzz) => {\n  const { num } = props\n  return (\n    <>\n      <Paper>\n        <Typography variant=\"h5\" gutterBottom>\n          {num}\n        </Typography>\n        <Typography variant=\"h2\" gutterBottom>\n          {calc(Number(num))}\n        </Typography>\n      </Paper>\n    </>\n  )\n}\n","export const calc = (num: number) => {\n  if (num % 3 === 0 && num % 5 === 0) {\n    return 'FizzBuzz'\n  }\n\n  if (num % 3 === 0) {\n    return 'Fizz'\n  }\n  if (num % 5 === 0) {\n    return 'Buzz'\n  }\n  return `${num}`\n}\n","import * as React from 'react'\nimport { FizzBuzz } from './FizzBuzz'\n\nexport const FizzBuzzList = (props: any) => {\n  const { num } = props\n\n  let list = [...Array(Number(num))].map((_, i) => i + 1)\n\n  return (\n    <>\n      {list.map((value) => {\n        return <FizzBuzz key={value} num={String(value)} />\n      })}\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport './App.css'\nimport { FizzBuzz } from './components/FizzBuzz'\nimport { FizzBuzzList } from 'components/FizzBuzzList'\nimport { ChangeEvent } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(5),\n      padding: theme.spacing(3),\n      width: theme.spacing(32),\n      height: theme.spacing(16),\n    },\n  },\n}))\n\nfunction App() {\n  const [count, setCount] = useState('1')\n  const classes = useStyles()\n\n  const handleEvent = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = Number(e.target.value)\n    if (value < 0) {\n      e.target.value = '0'\n    }\n    if (e.target.value.length > 3) {\n      e.target.value = e.target.value.slice(0, 3)\n    }\n    setCount(e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TextField\n          id=\"outlined-number\"\n          label=\"Fizzbuzz\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          inputProps={{\n            min: 0,\n          }}\n          variant=\"outlined\"\n          onChange={handleEvent}\n          defaultValue={count}\n        />\n\n        <div className={classes.root}>\n          <FizzBuzz num={count} />\n        </div>\n\n        <div className={classes.root}>\n          <FizzBuzzList num={count} />\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}